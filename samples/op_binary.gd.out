Script [1:0..45:0]
 ├─ Comment [1:0..1:21]: "# Order of operations"
 ├─ SimpleStatement [2:0..3:0]
 │   ├─ SmallStatement [2:0..2:13]
 │   │   └─ BinaryOperatorExpressionNode [2:0..2:13]
 │   │       ├─ BinaryOperatorExpressionNode [2:0..2:9]
 │   │       │   ├─ LiteralExpressionNode [2:0..2:1]: "1"
 │   │       │   ├─ ArithOp [2:2..2:3]: "+"
 │   │       │   └─ BinaryOperatorExpressionNode [2:4..2:9]
 │   │       │       ├─ LiteralExpressionNode [2:4..2:5]: "2"
 │   │       │       ├─ ArithOp [2:6..2:7]: "*"
 │   │       │       └─ LiteralExpressionNode [2:8..2:9]: "3"
 │   │       ├─ ArithOp [2:10..2:11]: "+"
 │   │       └─ LiteralExpressionNode [2:12..2:13]: "4"
 │   └─ Newline [2:13..3:0]: "\n"
 ├─ Comment [4:0..4:7]: "# Power"
 ├─ SimpleStatement [5:0..6:0]
 │   ├─ SmallStatement [5:0..5:6]
 │   │   └─ BinaryOperatorExpressionNode [5:0..5:6]
 │   │       ├─ LiteralExpressionNode [5:0..5:1]: "1"
 │   │       ├─ ArithOp [5:2..5:4]: "**"
 │   │       └─ LiteralExpressionNode [5:5..5:6]: "2"
 │   └─ Newline [5:6..6:0]: "\n"
 ├─ Comment [7:0..7:8]: "# Factor"
 ├─ SimpleStatement [8:0..8:4]
 │   ├─ SmallStatement [8:0..8:4]
 │   │   ├─ LiteralExpressionNode [8:0..8:1]: "1"
 │   │   └─ ⚠ [8:2..8:3]: "/"
 │   └─ ⚠ 8:4
 ├─ SimpleStatement [8:4..9:0]
 │   ├─ SmallStatement [8:4..8:5]
 │   │   └─ LiteralExpressionNode [8:4..8:5]: "2"
 │   └─ Newline [8:5..9:0]: "\n"
 ├─ SimpleStatement [9:0..10:0]
 │   ├─ SmallStatement [9:0..9:5]
 │   │   └─ BinaryOperatorExpressionNode [9:0..9:5]
 │   │       ├─ LiteralExpressionNode [9:0..9:1]: "1"
 │   │       ├─ ArithOp [9:2..9:3]: "%"
 │   │       └─ LiteralExpressionNode [9:4..9:5]: "2"
 │   └─ Newline [9:5..10:0]: "\n"
 ├─ SimpleStatement [10:0..11:0]
 │   ├─ SmallStatement [10:0..10:5]
 │   │   └─ BinaryOperatorExpressionNode [10:0..10:5]
 │   │       ├─ LiteralExpressionNode [10:0..10:1]: "1"
 │   │       ├─ ArithOp [10:2..10:3]: "*"
 │   │       └─ LiteralExpressionNode [10:4..10:5]: "2"
 │   └─ Newline [10:5..11:0]: "\n"
 ├─ Comment [12:0..12:21]: "# AdditionSubtraction"
 ├─ SimpleStatement [13:0..14:0]
 │   ├─ SmallStatement [13:0..13:5]
 │   │   └─ BinaryOperatorExpressionNode [13:0..13:5]
 │   │       ├─ LiteralExpressionNode [13:0..13:1]: "1"
 │   │       ├─ ArithOp [13:2..13:3]: "+"
 │   │       └─ LiteralExpressionNode [13:4..13:5]: "2"
 │   └─ Newline [13:5..14:0]: "\n"
 ├─ SimpleStatement [14:0..15:0]
 │   ├─ SmallStatement [14:0..14:5]
 │   │   └─ BinaryOperatorExpressionNode [14:0..14:5]
 │   │       ├─ LiteralExpressionNode [14:0..14:1]: "1"
 │   │       ├─ ArithOp [14:2..14:3]: "-"
 │   │       └─ LiteralExpressionNode [14:4..14:5]: "2"
 │   └─ Newline [14:5..15:0]: "\n"
 ├─ Comment [16:0..16:10]: "# Bitshift"
 ├─ SimpleStatement [17:0..18:0]
 │   ├─ SmallStatement [17:0..17:6]
 │   │   └─ BinaryOperatorExpressionNode [17:0..17:6]
 │   │       ├─ LiteralExpressionNode [17:0..17:1]: "1"
 │   │       ├─ BitOp [17:2..17:4]: "<<"
 │   │       └─ LiteralExpressionNode [17:5..17:6]: "2"
 │   └─ Newline [17:6..18:0]: "\n"
 ├─ SimpleStatement [18:0..19:0]
 │   ├─ SmallStatement [18:0..18:6]
 │   │   └─ BinaryOperatorExpressionNode [18:0..18:6]
 │   │       ├─ LiteralExpressionNode [18:0..18:1]: "1"
 │   │       ├─ BitOp [18:2..18:4]: ">>"
 │   │       └─ LiteralExpressionNode [18:5..18:6]: "2"
 │   └─ Newline [18:6..19:0]: "\n"
 ├─ Comment [20:0..20:12]: "# Comparison"
 ├─ SimpleStatement [21:0..22:0]
 │   ├─ SmallStatement [21:0..21:6]
 │   │   └─ BinaryOperatorExpressionNode [21:0..21:6]
 │   │       ├─ LiteralExpressionNode [21:0..21:1]: "1"
 │   │       ├─ CompareOp [21:2..21:4]: "=="
 │   │       └─ LiteralExpressionNode [21:5..21:6]: "2"
 │   └─ Newline [21:6..22:0]: "\n"
 ├─ SimpleStatement [22:0..23:0]
 │   ├─ SmallStatement [22:0..22:6]
 │   │   └─ BinaryOperatorExpressionNode [22:0..22:6]
 │   │       ├─ LiteralExpressionNode [22:0..22:1]: "1"
 │   │       ├─ CompareOp [22:2..22:4]: "!="
 │   │       └─ LiteralExpressionNode [22:5..22:6]: "2"
 │   └─ Newline [22:6..23:0]: "\n"
 ├─ SimpleStatement [23:0..24:0]
 │   ├─ SmallStatement [23:0..23:5]
 │   │   └─ BinaryOperatorExpressionNode [23:0..23:5]
 │   │       ├─ LiteralExpressionNode [23:0..23:1]: "1"
 │   │       ├─ CompareOp [23:2..23:3]: "<"
 │   │       └─ LiteralExpressionNode [23:4..23:5]: "2"
 │   └─ Newline [23:5..24:0]: "\n"
 ├─ SimpleStatement [24:0..25:0]
 │   ├─ SmallStatement [24:0..24:6]
 │   │   └─ BinaryOperatorExpressionNode [24:0..24:6]
 │   │       ├─ LiteralExpressionNode [24:0..24:1]: "1"
 │   │       ├─ CompareOp [24:2..24:4]: "<="
 │   │       └─ LiteralExpressionNode [24:5..24:6]: "2"
 │   └─ Newline [24:6..25:0]: "\n"
 ├─ SimpleStatement [25:0..26:0]
 │   ├─ SmallStatement [25:0..25:5]
 │   │   └─ BinaryOperatorExpressionNode [25:0..25:5]
 │   │       ├─ LiteralExpressionNode [25:0..25:1]: "1"
 │   │       ├─ CompareOp [25:2..25:3]: ">"
 │   │       └─ LiteralExpressionNode [25:4..25:5]: "2"
 │   └─ Newline [25:5..26:0]: "\n"
 ├─ SimpleStatement [26:0..27:0]
 │   ├─ SmallStatement [26:0..26:6]
 │   │   └─ BinaryOperatorExpressionNode [26:0..26:6]
 │   │       ├─ LiteralExpressionNode [26:0..26:1]: "1"
 │   │       ├─ CompareOp [26:2..26:4]: ">="
 │   │       └─ LiteralExpressionNode [26:5..26:6]: "2"
 │   └─ Newline [26:6..27:0]: "\n"
 ├─ Comment [28:0..28:8]: "# Bit or"
 ├─ SimpleStatement [29:0..30:0]
 │   ├─ SmallStatement [29:0..29:5]
 │   │   └─ BinaryOperatorExpressionNode [29:0..29:5]
 │   │       ├─ LiteralExpressionNode [29:0..29:1]: "1"
 │   │       ├─ BitOp [29:2..29:3]: "|"
 │   │       └─ LiteralExpressionNode [29:4..29:5]: "2"
 │   └─ Newline [29:5..30:0]: "\n"
 ├─ Comment [31:0..31:9]: "# Bit xor"
 ├─ SimpleStatement [32:0..33:0]
 │   ├─ SmallStatement [32:0..32:5]
 │   │   └─ BinaryOperatorExpressionNode [32:0..32:5]
 │   │       ├─ LiteralExpressionNode [32:0..32:1]: "1"
 │   │       ├─ BitOp [32:2..32:3]: "^"
 │   │       └─ LiteralExpressionNode [32:4..32:5]: "2"
 │   └─ Newline [32:5..33:0]: "\n"
 ├─ Comment [34:0..34:9]: "# Bit and"
 ├─ SimpleStatement [35:0..36:0]
 │   ├─ SmallStatement [35:0..35:5]
 │   │   └─ BinaryOperatorExpressionNode [35:0..35:5]
 │   │       ├─ LiteralExpressionNode [35:0..35:1]: "1"
 │   │       ├─ BitOp [35:2..35:3]: "&"
 │   │       └─ LiteralExpressionNode [35:4..35:5]: "2"
 │   └─ Newline [35:5..36:0]: "\n"
 ├─ Comment [37:0..37:11]: "# Logic and"
 ├─ SimpleStatement [38:0..39:0]
 │   ├─ SmallStatement [38:0..38:6]
 │   │   └─ BinaryOperatorExpressionNode [38:0..38:6]
 │   │       ├─ LiteralExpressionNode [38:0..38:1]: "1"
 │   │       ├─ LogicOp [38:2..38:4]: "&&"
 │   │       └─ LiteralExpressionNode [38:5..38:6]: "2"
 │   └─ Newline [38:6..39:0]: "\n"
 ├─ Comment [40:0..40:10]: "# Logic or"
 ├─ SimpleStatement [41:0..42:0]
 │   ├─ SmallStatement [41:0..41:6]
 │   │   └─ BinaryOperatorExpressionNode [41:0..41:6]
 │   │       ├─ LiteralExpressionNode [41:0..41:1]: "1"
 │   │       ├─ LogicOp [41:2..41:4]: "||"
 │   │       └─ LiteralExpressionNode [41:5..41:6]: "2"
 │   └─ Newline [41:6..42:0]: "\n"
 ├─ Comment [43:0..43:4]: "# in"
 └─ SimpleStatement [44:0..45:0]
     ├─ SmallStatement [44:0..44:6]
     │   └─ BinaryOperatorExpressionNode [44:0..44:6]
     │       ├─ LiteralExpressionNode [44:0..44:1]: "1"
     │       ├─ in [44:2..44:4]: "in"
     │       └─ LiteralExpressionNode [44:5..44:6]: "2"
     └─ Newline [44:6..45:0]: "\n"